import re
import requests
import json
import os

# Fonction pour extraire l'ID de la CVE à partir de l'URL
def extract_cve_id(url):
    # Si l'URL contient "/cve/", extrayez l'ID de la CVE
    if "/cve/" in url:
        cve_id = url.split("/")[-1]
        print("CVE ID extracted:", cve_id)
        return str(cve_id)  # Convertir l'ID en chaîne de caractères
    # Si l'URL contient "/exploitdb/", utilisez une expression régulière pour extraire l'ID
    elif "/exploitdb/" in url:
        match = re.search(r"EDB-ID:(\d+)", url)
        if match:
            cve_id = match.group(1)
            print("CVE ID extracted:", cve_id)
            return str(cve_id)  # Convertir l'ID en chaîne de caractères
    # Si l'URL contient "/exploitpack/", "/packetstorm/", "/seebug/", "/zdt/", "/prion/", ou "/githubexploit/", extrayez l'ID correspondant
    else:
        cve_id = url.split("/")[-1]
        print("ID extracted:", cve_id)
        return str(cve_id)

# Fonction pour récupérer les informations sur la CVE depuis l'API de Vulners
def get_cve_info(cve_id):
    url = f"https://vulners.com/api/v3/search/id/?id={cve_id}"  # Utiliser l'ID de la CVE ou de l'exploitpack directement
    print("API URL:", url)
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print("Failed to fetch CVE information")
        return None

# Fonction pour analyser la description de la CVE et rechercher des mots-clés
def analyze_description(description, keywords):
    if description.strip():  # Vérifier si la description n'est pas vide
        matches = [keyword for keyword in keywords if keyword in description.lower()]
        return matches
    else:
        return None  # Retourner None si la description est vide

def classify_matches(matches, keyword_mapping, filename, cve_address):
    categories = {}
    for match in matches:
        print("Mot-clé trouvé:", match)
        for key, values in keyword_mapping.items():
            if match in values:
                print("Correspondance trouvée dans le dictionnaire.")
                with open(filename, 'r+') as file:
                    data = json.load(file)
                    print("data = ", data)
                    urls_data = data["NmapScan1"]
                    for url_data in urls_data:
                        for port_data in url_data["ports"]:
                            for vulnerability in port_data["vulnerabilities"]:
                                if vulnerability["address"] == cve_address:
                                    if "MITRE&ATTACK" not in vulnerability:
                                        vulnerability["MITRE&ATTACK"] = {}
                                    if key not in vulnerability["MITRE&ATTACK"]:
                                        vulnerability["MITRE&ATTACK"][key] = []
                                    vulnerability["MITRE&ATTACK"][key].append(match)
                                    break
                            else:
                                print(f"CVE address {cve_address} not found in {filename}")
                    file.seek(0)
                    json.dump(data, file, indent=4)
                    file.truncate()
        categories[key] = matches

    return categories


def search_exploit_available():
    session_file = "json/session.json"  # Chemin vers le fichier de session
    session_name = get_session_name(session_file)
    filename = f"reports/{session_name}_session/{session_name}.json"
    with open(filename, 'r') as file:
        data = json.load(file)
        urls_data = data["NmapScan1"]

    # Charger les mots-clés à partir du fichier JSON
    with open("lists/keywords_mitre_attck.json", "r") as keyword_file:
        keywords = json.load(keyword_file)["keywords"]
    
    # Charger le dictionnaire de correspondance à partir du fichier JSON
    with open("lists/keywords_mapping.json", "r") as keyword_mapping_file:
        keyword_mapping = json.load(keyword_mapping_file)["keywords_mapping"]
        print(keyword_mapping)

    for data in urls_data:
        for port_data in data["ports"]:
            for vulnerability in port_data["vulnerabilities"]:
                url = vulnerability["address"]
                print("\nProcessing URL:", url)
                # Extraire l'ID de la CVE à partir de l'URL
                cve_id = extract_cve_id(url)

                if cve_id:
                    # Récupérer les informations sur la CVE depuis l'API de Vulners
                    cve_info = get_cve_info(cve_id)
                    if cve_info:      
                        # Afficher la description de la CVE
                        if 'data' in cve_info and 'documents' in cve_info['data']:
                            cve_data = cve_info['data']['documents'].get(cve_id, {})
                            description = cve_data.get('description', '')
                            print("\nDescription de la CVE:")
                            if description.strip():  # Vérifier si la description n'est pas vide
                                print(description)
                                # Analyser la description de la CVE et rechercher des mots-clés
                                matches = analyze_description(description, keywords)
                                if matches:
                                    print("\nMots-clés trouvés dans la description de la CVE:", matches)
                                    
                                    # Classer les correspondances avec la matrice ATT&CK
                                    classified_categories = classify_matches(matches, keyword_mapping, filename, url)
                                    if classified_categories:
                                        print("\nCatégories classées avec la matrice MITRE ATT&CK:", classified_categories)
                                    else:
                                        print("\nAucune correspondance avec la matrice MITRE ATT&CK.")
                                else:
                                    print("\nAucun mot-clé pertinent trouvé dans la description de la CVE.")
                            else:
                                print("La description de la CVE est vide.")
                        else:
                            print("Impossible de récupérer les informations sur la CVE.")
                    else:
                        print("Impossible de récupérer les informations sur la CVE.")
                else:
                    print("Impossible d'extraire l'ID de la CVE depuis l'URL.")

def get_session_name(session_file):
    if os.path.exists(session_file):
        with open(session_file, 'r') as file:
            data = json.load(file)
            session_name = data['sessionName']
        return session_name